% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allMethods.R
\name{BamBigwig_to_chipProfile}
\alias{BamBigwig_to_chipProfile}
\title{BamBigwig_to_chipProfile}
\usage{
BamBigwig_to_chipProfile(signalFiles, testRanges, format,
  style = "percentOfRegion", nOfWindows = 100, bin_size = 20,
  distanceAround = 100, ..., quant_params = MulticoreParam(workers =
  multicoreWorkers()))
}
\arguments{
\item{signalFiles}{paths to either BAM files or bigwig files. More than one path can be in this character vector, but all paths in one function call must point to be either all BAM files or all bigWig files, not a combination of the two.}

\item{testRanges}{A character vector with paths to BED files.}

\item{format}{character string of "bam", "bigwig", "RleList" or "PWM"}

\item{style}{a character string, "percentOfRegion" (default) for normalized length divided into bins set by the 'nOfWindows' argument, "point" for per base pair plot where the number of base pairs per bin is set by the 'bin_size' argument, and "region" for combined plot}

\item{nOfWindows}{The number of windows/bins the normalised ranges will be divided into if 'style' is set to 'percentOfRegion'. Default is 100.}

\item{bin_size}{If 'style' is set to 'point' then this will determine the size of each bin over which signal is quantified. The default is 20 base pairs.}

\item{distanceAround}{If 'style' is 'percentOfRegion', then this controls the distance around the region that is included. Default is 100, meaning that a distance equal to 100 percent of that particular region on either side of the region will be included in the heatmap.}

\item{...}{pass to regionPlot() within the soGGi package}

\item{quant_params}{An optional \code{\link[BiocParallel:BiocParallelParam-class]{BiocParallelParam}} instance determining the parallel back-end to be used during evaluation. Default is MulticoreParam(), and the number of cores (workers) used in the MulticoreParam() function can be set with the 'workers' argument withing the MulticoreParam() call.}
}
\value{
A profileplyr object
}
\description{
Generate a soGGi ChIPprofile object with multiple BAM/bigWig files or multiple BED files as the input
}
\examples{
signalFiles <- c(system.file("extdata",
                             "Sorted_Hindbrain_day_12_1_filtered.bam",
                              package = "profileplyr"))
require(Rsamtools)
for (i in seq_along(signalFiles)){
 indexBam(signalFiles[i])
}
testRanges <- system.file("extdata", 
                          "newranges_small.bed", 
                          package = "profileplyr")
BamBigwig_to_chipProfile(signalFiles, 
                         testRanges, 
                         format = "bam",
                         paired=FALSE,
                         style="percentOfRegion",
                         )
}
